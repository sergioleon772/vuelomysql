CREATE OR REPLACE FUNCTION verificar_datos_cliente() 
RETURNS TRIGGER AS $$
DECLARE
    edad_cliente INT;
    total1 INT;
BEGIN
    SELECT COUNT(*) INTO total1 FROM CLIENTE WHERE RUT_CLIENTE = NEW.RUT_CLIENTE;
    
    IF total1 = 0 THEN
        NEW.NOMBRE := UPPER(NEW.NOMBRE);
        NEW.APELLIDO := UPPER(NEW.APELLIDO);
        NEW.CORREO := UPPER(NEW.CORREO);
        NEW.DIRECCION_CLIENTE.REGION := UPPER(NEW.DIRECCION_CLIENTE.REGION);
        NEW.DIRECCION_CLIENTE.COMUNA := UPPER(NEW.DIRECCION_CLIENTE.COMUNA);
        NEW.DIRECCION_CLIENTE.CALLE := UPPER(NEW.DIRECCION_CLIENTE.CALLE);
        
        edad_cliente := DATE_PART('year', AGE(NEW.FECHA_NACIMIENTO));
        
        IF edad_cliente < 18 THEN
            RAISE EXCEPTION 'El cliente es menor de edad' USING ERRCODE = 'P0001';
        END IF;
    ELSE
        RAISE EXCEPTION 'Cliente duplicado' USING ERRCODE = 'P0002';
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER verificar_datos_cliente_trigger
BEFORE INSERT ON CLIENTE
FOR EACH ROW
EXECUTE FUNCTION verificar_datos_cliente();


CREATE OR REPLACE FUNCTION actualizar_datos_cliente()
RETURNS TRIGGER AS $$
BEGIN
    -- Convertir a mayúsculas los campos simples
    NEW.NOMBRE := UPPER(NEW.NOMBRE);
    NEW.APELLIDO := UPPER(NEW.APELLIDO);
    NEW.CORREO := UPPER(NEW.CORREO);

    -- Convertir a mayúsculas los campos del tipo compuesto DIRECCION_CLIENTE
    NEW.DIRECCION_CLIENTE.region := UPPER(NEW.DIRECCION_CLIENTE.region);
    NEW.DIRECCION_CLIENTE.comuna := UPPER(NEW.DIRECCION_CLIENTE.comuna);
    NEW.DIRECCION_CLIENTE.calle := UPPER(NEW.DIRECCION_CLIENTE.calle);

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER actualizar_datos_cliente_trigger
BEFORE UPDATE ON CLIENTE
FOR EACH ROW
EXECUTE FUNCTION actualizar_datos_cliente();


CREATE OR REPLACE FUNCTION actualizar_datos_agencia()
RETURNS TRIGGER AS $$
BEGIN
    NEW.NOMBRE_AGENCIA := UPPER(NEW.NOMBRE_AGENCIA);
    NEW.DIRECCION_A.REGION := UPPER(NEW.DIRECCION_A.REGION);
    NEW.DIRECCION_A.COMUNA := UPPER(NEW.DIRECCION_A.COMUNA);
    NEW.DIRECCION_A.CALLE := UPPER(NEW.DIRECCION_A.CALLE);
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER actualizar_datos_agencia_trigger
BEFORE UPDATE ON AGENCIA
FOR EACH ROW
EXECUTE FUNCTION actualizar_datos_agencia();



CREATE OR REPLACE FUNCTION verificar_datos_agencia()
RETURNS TRIGGER AS $$
DECLARE
    total INT;
BEGIN
    SELECT COUNT(*) INTO total FROM AGENCIA WHERE ID_AGENCIA = NEW.ID_AGENCIA;
    
    IF total = 0 THEN
        NEW.NOMBRE_AGENCIA := UPPER(NEW.NOMBRE_AGENCIA);
        NEW.DIRECCION_A.REGION := UPPER(NEW.DIRECCION_A.REGION);
        NEW.DIRECCION_A.COMUNA := UPPER(NEW.DIRECCION_A.COMUNA);
        NEW.DIRECCION_A.CALLE := UPPER(NEW.DIRECCION_A.CALLE);
        
        IF LENGTH(NEW.TELEFONO) <> 9 THEN
            RAISE EXCEPTION 'El número a registrar es inválido' USING ERRCODE = 'P0003';
        END IF;
    ELSE
        RAISE EXCEPTION 'Agencia ya existe con ese código' USING ERRCODE = 'P0004';
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER verificar_datos_agencia_trigger
BEFORE INSERT ON AGENCIA
FOR EACH ROW
EXECUTE FUNCTION verificar_datos_agencia();


CREATE OR REPLACE FUNCTION descuenta_asientos()
RETURNS TRIGGER AS $$
DECLARE
    stock_d INT;
BEGIN
    SELECT TOTAL_ASIENTOS INTO stock_d FROM VUELO WHERE COD_VUELO = NEW.COD_VUELO;

    IF (SELECT COUNT(*) FROM PASAJE WHERE COD_VUELO = NEW.COD_VUELO AND N_ASIENTO = NEW.N_ASIENTO) >= 1 THEN
        RAISE EXCEPTION 'El asiento no está disponible' USING ERRCODE = 'P0005';
    ELSIF NEW.N_ASIENTO <= 0 THEN
        RAISE EXCEPTION 'Cantidad a comprar es negativa' USING ERRCODE = 'P0006';
    ELSIF NEW.N_ASIENTO > stock_d THEN
        RAISE EXCEPTION 'Asientos no hay' USING ERRCODE = 'P0007';
    ELSE
        UPDATE VUELO SET CANTIDAD_ASIENTO = CANTIDAD_ASIENTO - 1 WHERE COD_VUELO = NEW.COD_VUELO;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER descuenta_asientos_trigger
BEFORE INSERT ON PASAJE
FOR EACH ROW
EXECUTE FUNCTION descuenta_asientos();


CREATE OR REPLACE FUNCTION precio_vuelo()
RETURNS TRIGGER AS $$
DECLARE
    precio NUMERIC;
BEGIN
    SELECT VALOR INTO precio FROM VUELO WHERE COD_VUELO = NEW.COD_VUELO;
    NEW.TOTAL := precio;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER precio_vuelo_trigger
BEFORE INSERT ON PASAJE
FOR EACH ROW
EXECUTE FUNCTION precio_vuelo();


CREATE OR REPLACE FUNCTION cantidad_asiento_igual()
RETURNS TRIGGER AS $$
BEGIN
    NEW.TOTAL_ASIENTOS := NEW.CANTIDAD_ASIENTO;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER cantidad_asiento_igual_trigger
BEFORE INSERT ON VUELO
FOR EACH ROW
EXECUTE FUNCTION cantidad_asiento_igual();


CREATE OR REPLACE FUNCTION valor_carrito()
RETURNS TRIGGER AS $$
DECLARE
    precio NUMERIC;
BEGIN
    SELECT VALOR INTO precio FROM VUELO WHERE COD_VUELO = NEW.COD_VUELO;
    NEW.TOTAL := precio;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER valor_carrito_trigger
BEFORE INSERT ON CARRITO
FOR EACH ROW
EXECUTE FUNCTION valor_carrito();
